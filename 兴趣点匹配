#include <opencv2/opencv.hpp>
#include <opencv2/highgui.hpp>
#include <iostream> 
#include <vector>

using namespace std;
using namespace cv;

int main()
{
	cv::Mat img1, img2;
	vector<cv::KeyPoint> keyPoints1, keyPoints2;
	cv::namedWindow("Resource", cv::WINDOW_AUTOSIZE);	
	img1 = cv::imread("D:\\∞Õ¿Ë1.jpg");
	img2 = cv::imread("D:\\∞Õ¿Ë2.jpg");

	cv::Ptr<cv::FeatureDetector> ptrDetector;
	ptrDetector = cv::FastFeatureDetector::create(80);
	ptrDetector->detect(img1, keyPoints1);
	ptrDetector->detect(img2, keyPoints2);

	const int nsize(11);
	cv::Rect neighborhood(0, 0, nsize, nsize);
	cv::Mat patch1, patch2;

	cv::Mat result;
	vector<cv::DMatch> matchs;
	int i = 0;

	for(auto it1 = keyPoints1.begin(); it1 != keyPoints1.end(); it1++)
	{
		neighborhood.x = it1->pt.x - nsize / 2;
		neighborhood.y = it1->pt.y - nsize / 2;
		if (neighborhood.x < 2 || neighborhood.y < 2 ||
			neighborhood.x + nsize > img1.cols - 2 || neighborhood.y + nsize> img1.rows - 2)
		{
			continue;
		}
		patch1 = img1(neighborhood);

		cv::DMatch bestMatch;
		int j = 0;

		for (auto it2 = keyPoints2.begin(); it2 != keyPoints2.end(); it2++)
		{
			neighborhood.x = it2->pt.x - nsize / 2;
			neighborhood.y = it2->pt.y - nsize / 2;
			if (neighborhood.x < 2 || neighborhood.y < 2 ||
				neighborhood.x + nsize > img2.cols - 2 || neighborhood.y + nsize > img2.rows - 2)
			{
				continue;
			}
			patch2 = img2(neighborhood);

			cv::matchTemplate(patch1, patch2, result, cv::TM_SQDIFF);
			if (result.at<float>(0, 0) < bestMatch.distance)
			{
				bestMatch.distance = result.at<float>(0, 0);
				bestMatch.queryIdx = i;
				bestMatch.trainIdx = j;
			}
			j++;
		}
		i++;
		matchs.push_back(bestMatch);
	}

	std::nth_element(matchs.begin(), matchs.begin() + 25, matchs.end());
	matchs.erase(matchs.begin() + 25, matchs.end());

	cv::Mat matchImage;
	cv::drawMatches(img1, keyPoints1, img2, keyPoints2,
		matchs, matchImage, cv::Scalar(255, 0, 0), cv::Scalar(0, 255, 0));
	cv::imshow("MatchImage", matchImage);

	cv::waitKey(0);
	return 0;
}