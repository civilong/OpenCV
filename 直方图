#include <opencv2/opencv.hpp>
#include <random>
#include <iostream> 
#include<vector>
using namespace std;

class Histogram1D
{
public:
	Histogram1D()
	{
		histSize[0] = 256;  
		hranges[0] = 0.0;   
		hranges[1] = 256.0; //不含
		ranges[0] = hranges;
		channels[0] = 0;
	}

	cv::Mat getHistogram(const cv::Mat &image)
	{
		cv::Mat hist;
		cv::calcHist(&image, 1, channels, cv::Mat(), hist, 1, histSize, ranges);
		return hist;
	}

	cv::Mat getHistogramImage(const cv::Mat &image, int zoom = 1)
	{
		cv::Mat hist = getHistogram(image);
		return getImageOfHistograme(hist, zoom);
	}

	static cv::Mat getImageOfHistograme(const cv::Mat &hist, int zoom)
	{
		double maxVal = 0;
		double minVal = 0;
		cv::minMaxLoc(hist, &minVal, &maxVal, 0, 0);
		int histSize = hist.rows;
		cv::Mat histImg(histSize*zoom, histSize*zoom, CV_8U, cv::Scalar(255));
		int hpt = static_cast<int>(0.9*histSize);
		for (int h = 0; h < histSize; h++)
		{
			float binVal = hist.at<float>(h);
			if (binVal > 0)
			{
				int intensity = static_cast<int>(binVal*hpt / maxVal);
				cv::line(histImg, cv::Point(h*zoom, histSize*zoom),
					cv::Point(h*zoom, (histSize - intensity)*zoom),
					cv::Scalar(0), zoom);
			}
		}
		return histImg;
	}

private:
	int histSize[1];		//箱子数量
	float hranges[2];       //值的范围
	const float* ranges[1];	//值范围的指针
	int channels[1];		//要检查的通道数量
};

int main()
{
	cv::Mat img1, img2;
	img1 = cv::imread("D:\\gray.jpg");
	Histogram1D  h;
	cv::Mat histo = h.getHistogram(img1);
	cv::namedWindow("Histogram");
	cv::imshow("Histogram", h.getHistogramImage(img1));

	cv::Mat lut(1, 256, CV_8U);
	for (int i = 0; i < 256; i++)
	{
		lut.at<uchar>(i) = 255 - i;
	}
	cv::LUT(img1, lut, img2);
	cv::imshow("Inverse", img2);

	cv::waitKey(0);
	return 0;
}