#include <opencv2/opencv.hpp>
#include <random>
#include <iostream> 
#include <vector>
using namespace std;

class LaplacianZC
{
private:
	cv::Mat laplace;
	int aperture;

public:
	LaplacianZC() :aperture(3) {}
	void setApeture(int a)
	{
		aperture = a;
	}

	cv::Mat computeLaplacian(const cv::Mat& image)
	{
		cv::Laplacian(image, laplace, CV_32F, aperture);
		return laplace;
	}

	cv::Mat getLaplacianImage(double scale = -1.0)
	{
		if (scale < 0)
		{
			double lapmin, lapmax;
			cv::minMaxLoc(laplace, &lapmin, &lapmax);
			scale = 127 / std::max(-lapmin, lapmax);
		}
		cv::Mat laplaceImage;
		laplace.convertTo(laplaceImage, CV_8U, scale, 128);
		return laplaceImage;
	}
};

int main()
{
	cv::Mat img1, img2, img3;
	img1 = cv::imread("D:\\gray.jpg");
	LaplacianZC l;
	img2 = l.computeLaplacian(img1);
	img3 = l.getLaplacianImage();
	cv::imshow("Test", img3);


	cv::waitKey(0);
	return 0;
}